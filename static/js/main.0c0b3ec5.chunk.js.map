{"version":3,"sources":["containers/ChooseList/ChooseList.module.css","containers/LanguagesSelector/LanguagesSelector.module.css","containers/LanguagesSelector/LanguageSelect/LanguageItem/LanguageItem.module.css","components/Main/Main.module.css","containers/LanguagesSelector/LanguageSelect/LanguageSelect.module.css","containers/Learning/Learning.module.css","components/Firebase/config.js","containers/ChooseList/ChooseList.js","containers/LanguagesSelector/LanguageSelect/LanguageItem/LanguageItem.js","containers/LanguagesSelector/LanguageSelect/LanguageSelect.js","containers/LanguagesSelector/LanguagesSelector.js","containers/Learning/Learning.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","ChooseList","props","replaceBad","text","replace","displayListNames","data","Object","keys","length","list","forEach","name","active","state","listActive","styles","elem","key","className","id","onClick","getListByName","data-count","push","getAllListNames","namesRef","once","then","res","val","setState","namesOfWordsLists","e","txt","target","innerText","listChosenHandler","frbs","firebase","database","listsRef","ref","this","header","Component","LanguageItem","isActive","includes","role","code","join","langClicked","langName","LanguageSelect","langItems","languages","map","languageClicked","LanguagesSelector","Selector","from","langChosenHandler","to","Learning","getQuestionFromList","localList","chosenListContent","rand","Math","floor","random","currentKeysArray","chosenKey","question","chosenLanguageQuestion","answer","chosenLanguageAnswer","answerColor","currKey","answerInput","focus","checkAnswer","ansColor","q","givenAnswer","answerText","a","currKeysArr","splice","class","placeholder","firstEnter","keyDownHandler","chosenListName","changeInputTextHandler","value","componentDidMount","console","log","exampleText","allRemaining","uniqueRemaining","questionBlock","chosenListNameText","LEDcolor","LEDcolorRed","LEDcolorGreen","Set","size","wordsRemain","questionDiv","style","color","questionAnswer","questionLED","type","input","invisible","onChange","onKeyDown","Main","pol","eng","ger","esp","child","languageChosenHandler","currLangs","langsActive","clicked","dir","slice","lang","shift","unshift","pop","makeNavLink","num","big","small","bottom","iconName","moving","mov","icon","initializeApp","lastRandom","listName","isMoving","navLangsNames","Centere____d","path","render","App","wordsLists","Boolean","window","location","hostname","match","app","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c0b3ec5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"ChooseList_list__Xw0bg\",\"active\":\"ChooseList_active__35i69\",\"header\":\"ChooseList_header__1-qEM\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Selector\":\"LanguagesSelector_Selector__25xUe\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LanguageItem\":\"LanguageItem_LanguageItem__1t4Bn\",\"active\":\"LanguageItem_active__5KEhr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ok\":\"Main_ok__2GMDV\",\"moving\":\"Main_moving__2SGVh\",\"flashing\":\"Main_flashing__Q1-6l\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"LanguageSelect\":\"LanguageSelect_LanguageSelect__3OgFJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"chosenListName\":\"Learning_chosenListName__j3GmB\",\"exampleText\":\"Learning_exampleText__2QMr3\",\"questionDiv\":\"Learning_questionDiv__2MTTy\",\"questionAnswer\":\"Learning_questionAnswer__1dm3H\",\"qestionDivBgGreen\":\"Learning_qestionDivBgGreen__3Ol2V\",\"questionLED\":\"Learning_questionLED__1O89o\",\"LEDcolorRed\":\"Learning_LEDcolorRed__2PU2f\",\"LEDcolorGreen\":\"Learning_LEDcolorGreen__3ZmCW\",\"answerInput\":\"Learning_answerInput__eYp5N\",\"button\":\"Learning_button__3gB4R\",\"btnConfirm\":\"Learning_btnConfirm__18Jo6\",\"btnStart\":\"Learning_btnStart__1vf2r\",\"btnWords\":\"Learning_btnWords__1ZFXc\",\"invisible\":\"Learning_invisible__12iWY\",\"btn-m\":\"Learning_btn-m__ZPnLu\"};","var firebaseConfig = {\r\n    apiKey: \"AIzaSyBfvJR2BnHEczU3DTT5KeGfxKgQ1kcAFY8\",\r\n    authDomain: \"online-tutor-words.firebaseapp.com\",\r\n    databaseURL: \"https://online-tutor-words.firebaseio.com\",\r\n    projectId: \"online-tutor-words\",\r\n    storageBucket: \"online-tutor-words.appspot.com\",\r\n    messagingSenderId: \"825935663104\",\r\n    appId: \"1:825935663104:web:9b9580c6f9fc39cbd308e5\",\r\n    measurementId: \"G-GDCCG2T6JX\"\r\n};\r\n\r\nexport { firebaseConfig };","import React, { Component } from 'react';\r\n\r\nimport firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n// import DBMaintenance from '../../components/Firebase/DBMaintenance'\r\n\r\nimport styles from './ChooseList.module.css';\r\n\r\nclass ChooseList extends Component {\r\n    constructor(props) {\r\n        super(props) ;\r\n        this.state = { \r\n            namesOfWordsLists: [],\r\n            listActive: this.props.listActive\r\n        }\r\n        this.frbs = firebase.database();\r\n        this.listsRef = this.frbs.ref('wordsLists/');\r\n        this.namesRef = this.frbs.ref('listNames/')\r\n    }\r\n\r\n    replaceBad = text => {\r\n        return text.replace(/( |\\(|\\))/g, '');\r\n    }\r\n    \r\n    displayListNames = data => {\r\n        if (Object.keys(data).length > 0) {\r\n            let list = []\r\n            Object.keys(data).forEach(name => {\r\n                let active = '';\r\n                if (name === this.state.listActive) { active = styles.active }\r\n                let elem =  <div key={name} className={active}>\r\n                    <div id={this.replaceBad(name)} onClick={this.getListByName} data-count={data[name]} >{name}</div>\r\n                    <span>{data[name]} elements</span>\r\n                    </div>\r\n                list.push(elem)\r\n            })\r\n            return list\r\n        } else {\r\n            return 'Loading data, please wait...'\r\n        }\r\n\r\n    }\r\n\r\n    getAllListNames = () => {\r\n        this.namesRef.once('value').then(res => {\r\n            let data = res.val();\r\n            this.setState({namesOfWordsLists: data})\r\n        })\r\n    }\r\n\r\n    getListByName = (e) => {\r\n        let txt = e.target.innerText\r\n        this.setState({listActive: txt})\r\n        this.props.listChosenHandler(txt)\r\n    }\r\n    \r\n    componentDidMount() {        \r\n        this.getAllListNames();\r\n    }\r\n\r\n    render() { \r\n        \r\n        const list = this.displayListNames(this.state.namesOfWordsLists)\r\n\r\n        return ( \r\n            <div>\r\n                {/* <DBMaintenance/> */}\r\n                <p className={styles.header}>Choose a list to learn:</p>\r\n                <div className={styles.list}>{list}</div> \r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default ChooseList;","import React from 'react'\r\n\r\nimport styles from './LanguageItem.module.css';\r\n\r\nconst LanguageItem = (props) => {\r\n\r\n    let isActive;\r\n    if (props.isActive.includes(props.role+props.code)) {\r\n        isActive = styles.active;\r\n    }\r\n\r\n    return ( <div className={[styles.LanguageItem, isActive].join(' ')}\r\n                onClick={props.langClicked}\r\n                role={props.role}\r\n                code={props.code}\r\n                id={props.role+props.code}\r\n                >{props.langName}</div> \r\n            );\r\n}\r\n \r\nexport default LanguageItem;","import React from 'react';\r\nimport LanguageItem from './LanguageItem/LanguageItem'\r\n\r\nimport styles from './LanguageSelect.module.css';\r\n\r\nconst LanguageSelect = (props) => {\r\n\r\n    let langKeys = Object.keys(props.languages);\r\n    let langItems = langKeys.map( key => {\r\n        return <LanguageItem\r\n            langName={props.languages[key]} \r\n            role={props.role}\r\n            code={key}\r\n            key={key}\r\n            isActive={props.isActive}\r\n            langClicked={props.languageClicked}\r\n            />\r\n    })\r\n    \r\n    return ( \r\n        <div className={styles.LanguageSelect}>\r\n            {langItems}\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default LanguageSelect;\r\n","import React from 'react'\r\nimport LanguageSelect from './LanguageSelect/LanguageSelect';\r\n\r\nimport styles from './LanguagesSelector.module.css';\r\n\r\nconst LanguagesSelector = (props) => {\r\n    \r\n    return ( \r\n        <div className={styles.Selector}>\r\n            <div className={styles.from}>\r\n                <p>From language:</p>\r\n                <LanguageSelect \r\n                    languageClicked={props.langChosenHandler} \r\n                    languages={props.languages}\r\n                    isActive={props.isActive}\r\n                    role=\"q\" \r\n                />\r\n            </div>\r\n            <div className={styles.to}>\r\n                <p>Translation to:</p>\r\n                <LanguageSelect  \r\n                    languageClicked={props.langChosenHandler} \r\n                    languages={props.languages}\r\n                    isActive={props.isActive}\r\n                    role=\"a\" \r\n                />\r\n            </div>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default LanguagesSelector;","import React, {Component} from 'react';\r\n\r\nimport styles from './Learning.module.css'\r\n\r\nclass Learning extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        console.log(props)\r\n        this.state = {\r\n            chosenLanguageQuestion: 'pol',\r\n            chosenLanguageAnswer: 'eng',\r\n            chosenListName: props.chosenListName,\r\n            chosenListContent: props.chosenListContent,\r\n            answerColor: 'black',\r\n            exampleText: '',\r\n            question: '',\r\n            answer: '',\r\n            answerText: '',\r\n            currentKeysArray: props.currentKeysArray,\r\n        }\r\n    }\r\n\r\n    getQuestionFromList = () => {\r\n        const localList = this.state.chosenListContent;\r\n        const rand = Math.floor(Math.random() * this.state.currentKeysArray.length);\r\n        const chosenKey = this.state.currentKeysArray[rand];\r\n        const question = localList[chosenKey][this.state.chosenLanguageQuestion];\r\n        const answer = localList[chosenKey][this.state.chosenLanguageAnswer];\r\n        this.setState({\r\n            question: question,\r\n            answer: answer,\r\n            answerColor: 'black',\r\n            currKey: rand,\r\n        })\r\n        this.answerInput.focus();\r\n    }\r\n\r\n    checkAnswer = () => {\r\n        const q = this.state.question;\r\n        const givenAnswer = this.state.answerText;\r\n        const a = this.state.answer;\r\n        const currKeysArr = this.state.currentKeysArray;\r\n        const currKey = currKeysArr[this.state.currKey];\r\n\r\n        if (a === givenAnswer) {\r\n            currKeysArr.splice(this.state.currKey, 1);\r\n            let question, ansColor;\r\n            if (currKeysArr.length > 0) {\r\n                // question = `${q} ==> ${a}!`\r\n                question = <span>{q} <i class=\"fas fa-arrows-alt-h\"></i> {a}</span>;\r\n                ansColor = 'green';\r\n            } else {\r\n                question = \"WSPANIALE, poznałeś wszystkie słowa z listy!!!\";\r\n                ansColor = 'blue';\r\n            }\r\n            this.setState({\r\n                question: question,\r\n                answerColor: ansColor,\r\n                answerText: '',\r\n                currentKeysArray: currKeysArr,\r\n                placeholder: 'naciśnij Enter'\r\n            })\r\n        } else {\r\n            currKeysArr.push(currKey)\r\n            this.setState({\r\n                // question: `${q} ==> ${a}!`,\r\n                question: <span>{q} <i class=\"fas fa-exchange-alt\"></i> {a}</span>,\r\n                answerColor: 'red',\r\n                answerText: '',\r\n                currentKeysArray: currKeysArr\r\n            })\r\n        }\r\n        this.answerInput.focus()\r\n    }\r\n\r\n    firstEnter = true;\r\n\r\n    keyDownHandler = e => {\r\n        if (e.key === 'Enter') {\r\n            if (this.firstEnter) {\r\n                this.checkAnswer();\r\n                this.firstEnter = false;\r\n                this.setState({\r\n                    placeholder: 'naciśnij Enter'\r\n                })\r\n            } else {\r\n                if (this.state.currentKeysArray.length > 0) {\r\n                    this.getQuestionFromList(this.state.chosenListContent, this.state.currentKeysArray);\r\n                    this.setState({\r\n                        placeholder: 'wpisz odpowiedź'\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        chosenListName: '',\r\n                        question: '',\r\n                    })\r\n                }\r\n                this.firstEnter = true;\r\n            }\r\n        }\r\n    }\r\n\r\n    changeInputTextHandler = e => {\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        console.log(this.state.chosenListName)\r\n        if (this.state.chosenListName !== \"\") {\r\n            this.getQuestionFromList(this.state.chosenListName, this.state.chosenListContent)\r\n        }\r\n    }\r\n\r\n    render() { \r\n\r\n        const chosenListNameText = (this.state.chosenListName === \"\")\r\n            ? <div><div>Before you start:</div><div>1. Chose a list of words,</div><div>2. Select languages: <b>from</b> and <b>to</b>.</div></div>\r\n            : 'Active list: ';\r\n        \r\n        let allRemaining, uniqueRemaining, LEDcolor = '', questionBlock;\r\n\r\n        switch (this.state.answerColor) {\r\n            case 'red': LEDcolor = styles.LEDcolorRed; break;\r\n            case 'green': LEDcolor = styles.LEDcolorGreen; break;\r\n            default:\r\n        }\r\n        if (this.state.currentKeysArray) {\r\n            allRemaining = this.state.currentKeysArray.length\r\n            uniqueRemaining = (new Set(this.state.currentKeysArray)).size\r\n        }\r\n\r\n        let wordsRemain = this.state.chosenListName === \"\" ? \"\" :\r\n            <span className={styles.wordsRemain}><b>{uniqueRemaining}</b> words to learn, <b>{allRemaining}</b> repetitions</span>;\r\n\r\n        if (this.state.question) {\r\n            questionBlock = <div className={styles.questionDiv}\r\n                                style={{color: this.state.answerColor}}>\r\n                                \r\n                                <div className={styles.questionAnswer}>\r\n                                    <div>\r\n                                        <div className={[styles.questionLED, LEDcolor].join(' ')}></div>\r\n                                        <b>{this.state.question}</b>\r\n                                        <div className={[styles.questionLED, LEDcolor].join(' ')}></div>\r\n                                    </div>\r\n                                    <div>translate into: {this.props.languages[this.state.chosenLanguageAnswer]}</div>\r\n                                </div>\r\n                                \r\n                            </div>\r\n        }\r\n\r\n        \r\n        return (\r\n            <div>\r\n                <div className={styles.chosenListName}>\r\n                <div>{chosenListNameText}<b>{this.props.chosenListName.replace('words','').replace('_', ' ')}</b></div>\r\n                <div>{wordsRemain}</div>\r\n                </div>\r\n\r\n                {questionBlock}\r\n\r\n                <input type=\"text\" \r\n                    name=\"answerText\"\r\n                    ref={(input) => { this.answerInput = input; }}  // only for getting focus\r\n                    className={[styles.answerInput, (this.state.chosenListName !== '') ? \"\" : styles.invisible].join(' ','')}\r\n                    onChange={this.changeInputTextHandler}\r\n                    onKeyDown={this.keyDownHandler}\r\n                    value={this.state.answerText} \r\n                    focus=\"true\"\r\n                    placeholder={this.state.placeholder}\r\n                    />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Learning;","import React, { Component } from 'react';\nimport { Route, Switch, BrowserRouter, NavLink } from 'react-router-dom';\nimport { firebaseConfig } from '../Firebase/config';\nimport firebase from 'firebase/app';\nimport 'firebase/database';\n\nimport ChooseList from '../../containers/ChooseList/ChooseList'\nimport LanguagesSelector from '../../containers/LanguagesSelector/LanguagesSelector';\nimport Learning from './../../containers/Learning/Learning'\n\nimport styles from './Main.module.css';\n\nclass Main extends Component {\n    constructor(props) {\n        super(props);\n        firebase.initializeApp(firebaseConfig);\n        this.frbs = firebase.database();\n        this.state = {\n            chosenListName: '',\n            lastRandom: 0,\n            currKey: 0,\n            langsActive: [\"qpol\", \"aeng\"],\n            placeholder: \"wpisz odpowiedź\"\n        }\n    }\n\n    languages = {pol: \"Polski\", eng: \"English\", ger: \"Deutsche\", esp: \"Español\"}\n\n    listChosenHandler = name => {\n        this.frbs.ref('lists/').child(name).once('value').then(res=> {\n            let list = res.val().list;\n            console.log('LIST: ', list, Object.keys(list))\n            this.setState({\n                chosenListName: name,\n                chosenListContent: list,\n                currentKeysArray: Object.keys(list)\n            })\n            // console.log(res.val().list, name)\n        })\n    }\n\n    languageChosenHandler = e => {\n        console.log(e.target.id)\n        let currLangs = this.state.langsActive;\n        let clicked = e.target.id;\n        let dir = clicked.slice(0,1);\n        let lang = clicked.slice(1);\n        if (dir === \"q\") {\n            currLangs.shift();\n            currLangs.unshift(clicked);\n        } else {\n            currLangs.pop();\n            currLangs.push(clicked);\n        }\n        dir === \"q\" ? this.setState({\n            chosenLanguageQuestion: lang,\n            langsActive: currLangs\n        }) : this.setState({\n            chosenLanguageAnswer: lang,\n            langsActive: currLangs\n        })\n    }\n\n    makeNavLink = (num, big, small, bottom, iconName, moving) => {\n        let mov = moving ? styles[moving] : '';\n        let icon = iconName ? <i className={[mov, iconName].join(' ')}></i>: '';\n        return <div className='navlink'>\n            <span><sup>{num}</sup> {big}</span><span>{small}</span><div>{bottom} {icon}</div>\n        </div>\n    }\n    \n    render() {\n\n        let listName = 'not chosen yet...';\n        let iconName = 'fas fa-chevron-left';\n        let isMoving = 'moving';\n        if (this.state.chosenListName !== '') {\n            iconName = 'fas fa-check';\n            isMoving = '';\n            listName = this.state.chosenListName;\n        }\n        let navLangsNames = '';\n        if (this.state.langsActive.length > 1) {\n            navLangsNames = <span>from: <b>{this.languages[this.state.langsActive[0].slice(1)]}</b> to: <b>{this.languages[this.state.langsActive[1].slice(1)]}</b></span>\n        }\n\n        return (\n            // <FirebaseContext.Consumer>\n                <div>\n                    <BrowserRouter className=\"rerer\">\n                        <header>\n                            <NavLink to=\"/choose\">{this.makeNavLink('1.', 'Choose', 'a list of words', listName, iconName, isMoving)}</NavLink>\n                            <NavLink to=\"/select\">{this.makeNavLink('2.', 'Select', 'languages', navLangsNames)}</NavLink>\n                            <NavLink to=\"/learn\">{this.makeNavLink('3.', 'Start', 'learning')}</NavLink>\n                        </header>\n\n                        <main className={styles.Centere____d}> \n                            <Switch>\n                                <Route path=\"/choose\" \n                                    render={() => { return <ChooseList \n                                        listChosenHandler={this.listChosenHandler}\n                                        chosenListName={this.state.chosenListName} \n                                        /> \n                                    } }\n                                />\n                                <Route path=\"/select\" \n                                    render={() => { return <LanguagesSelector \n                                        languages={this.languages} \n                                        langChosenHandler={this.languageChosenHandler}\n                                        isActive={this.state.langsActive} /> \n                                    } }\n                                />\n                                <Route path=\"/learn\" \n                                    render={() => { return <Learning \n                                        chosenListName={this.state.chosenListName}\n                                        chosenListContent={this.state.chosenListContent}\n                                        currentKeysArray={this.state.currentKeysArray}\n                                        languages={this.languages}\n                                        />\n                                    }} \n                                />\n                            </Switch>\n                        </main>\n                    </BrowserRouter>\n                </div>\n            // </FirebaseContext.Consumer>\n        )\n    }\n}\n\nexport default Main;","import React, {Component} from 'react';\nimport Main from './components/Main/Main';\n\nimport './App.module.css';\n\nclass App extends Component {\n\n\trender(){\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<Main wordsLists={this.wordsLists}/>\n\t\t\t\t<footer>Online-Tutor by MarcinO</footer>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter} from 'react-router-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst app = (\n        <BrowserRouter>\n            <App />\n        </BrowserRouter>\n)\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}